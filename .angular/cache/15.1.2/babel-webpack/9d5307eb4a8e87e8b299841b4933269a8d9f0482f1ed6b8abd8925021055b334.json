{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class ScriptServiceService {\n  constructor() {}\n  loadScript({\n    id,\n    url\n  }) {\n    return new Promise((resolve, reject) => {\n      if (id && document.getElementById(id)) {\n        resolve({\n          id: id,\n          loaded: true,\n          status: 'Already Loaded'\n        });\n      }\n      let body = document.body;\n      let script = document.createElement('script');\n      script.type = 'text/javascript';\n      script.src = url;\n      script.id = id;\n      script.onload = () => {\n        resolve({\n          id: id,\n          loaded: true,\n          status: 'Loaded'\n        });\n      };\n      script.onerror = error => resolve({\n        id: id,\n        loaded: false,\n        status: 'Loaded'\n      });\n      script.async = true;\n      script.defer = true;\n      body.appendChild(script);\n    });\n  }\n  removeScript(scriptId) {\n    const scriptList = scriptId.map(id => {\n      return document.getElementById(`${id}`);\n    });\n    Array.from(scriptList).forEach(element => {\n      if (element != null) {\n        element.remove();\n      }\n    });\n  }\n}\nScriptServiceService.ɵfac = function ScriptServiceService_Factory(t) {\n  return new (t || ScriptServiceService)();\n};\nScriptServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ScriptServiceService,\n  factory: ScriptServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAaA,OAAM,MAAOA,oBAAoB;EAC/BC,eAAe;EACRC,UAAU,CAAC;IAAEC,EAAE;IAAEC;EAAG,CAAiB;IAC1C,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;MACrC,IAAIJ,EAAE,IAAIK,QAAQ,CAACC,cAAc,CAACN,EAAE,CAAC,EAAE;QACrCG,OAAO,CAAC;UAAEH,EAAE,EAAEA,EAAE;UAAEO,MAAM,EAAE,IAAI;UAAEC,MAAM,EAAE;QAAgB,CAAE,CAAC;;MAE7D,IAAIC,IAAI,GAAGJ,QAAQ,CAACI,IAAI;MACxB,IAAIC,MAAM,GAAGL,QAAQ,CAACM,aAAa,CAAC,QAAQ,CAAC;MAC7CD,MAAM,CAACE,IAAI,GAAG,iBAAiB;MAC/BF,MAAM,CAACG,GAAG,GAAGZ,GAAG;MAChBS,MAAM,CAACV,EAAE,GAAGA,EAAE;MACdU,MAAM,CAACI,MAAM,GAAG,MAAK;QACnBX,OAAO,CAAC;UAAEH,EAAE,EAAEA,EAAE;UAAEO,MAAM,EAAE,IAAI;UAAEC,MAAM,EAAE;QAAQ,CAAE,CAAC;MACrD,CAAC;MACDE,MAAM,CAACK,OAAO,GAAIC,KAAU,IAC1Bb,OAAO,CAAC;QAAEH,EAAE,EAAEA,EAAE;QAAEO,MAAM,EAAE,KAAK;QAAEC,MAAM,EAAE;MAAQ,CAAE,CAAC;MACtDE,MAAM,CAACO,KAAK,GAAG,IAAI;MACnBP,MAAM,CAACQ,KAAK,GAAG,IAAI;MACnBT,IAAI,CAACU,WAAW,CAACT,MAAM,CAAC;IAC1B,CAAC,CAAC;EACJ;EAEOU,YAAY,CAACC,QAAkB;IACpC,MAAMC,UAAU,GAAGD,QAAQ,CAACE,GAAG,CAAEvB,EAAE,IAAI;MACrC,OAAOK,QAAQ,CAACC,cAAc,CAAC,GAAGN,EAAE,EAAE,CAAC;IACzC,CAAC,CAAC;IACFwB,KAAK,CAACC,IAAI,CAACH,UAAU,CAAC,CAACI,OAAO,CAAEC,OAAO,IAAI;MACzC,IAAIA,OAAO,IAAI,IAAI,EAAE;QACnBA,OAAO,CAACC,MAAM,EAAE;;IAEpB,CAAC,CAAC;EACJ;;AAhCW/B,oBAAoB;mBAApBA,oBAAoB;AAAA;AAApBA,oBAAoB;SAApBA,oBAAoB;EAAAgC,SAApBhC,oBAAoB;EAAAiC,YAFnB;AAAM","names":["ScriptServiceService","constructor","loadScript","id","url","Promise","resolve","reject","document","getElementById","loaded","status","body","script","createElement","type","src","onload","onerror","error","async","defer","appendChild","removeScript","scriptId","scriptList","map","Array","from","forEach","element","remove","factory","providedIn"],"sourceRoot":"","sources":["/Users/admin/Downloads/demo-checkout-with-angular/src/app/services/script-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\ninterface scriptId {\n  id: string;\n}\n\ninterface scriptElement extends scriptId {\n  url: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ScriptServiceService {\n  constructor() {}\n  public loadScript({ id, url }: scriptElement) {\n    return new Promise((resolve, reject) => {\n      if (id && document.getElementById(id)) {\n        resolve({ id: id, loaded: true, status: 'Already Loaded' });\n      }\n      let body = document.body;\n      let script = document.createElement('script');\n      script.type = 'text/javascript';\n      script.src = url;\n      script.id = id;\n      script.onload = () => {\n        resolve({ id: id, loaded: true, status: 'Loaded' });\n      };\n      script.onerror = (error: any) =>\n        resolve({ id: id, loaded: false, status: 'Loaded' });\n      script.async = true;\n      script.defer = true;\n      body.appendChild(script);\n    });\n  }\n\n  public removeScript(scriptId: string[]) {\n    const scriptList = scriptId.map((id) => {\n      return document.getElementById(`${id}`);\n    });\n    Array.from(scriptList).forEach((element) => {\n      if (element != null) {\n        element.remove();\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}